@page "/add-patient"
@using Microsoft.Extensions.Options
@inject PatientService PatientService;
@inject IOptions<SecretManager> SecretManager;
@inject ProtectedSessionStorage ProtectedSessionStore;
@rendermode InteractiveServer

<PageTitle>Add Patient</PageTitle>

@if (_isAuth)
{
    <h1>Add Patient</h1>
    
    @if (DisplayAlert) {
        <div class="alert @AlertClass fade-in" role="alert">@AlertMessage</div>
    }

    <EditForm OnValidSubmit="@HandleSubmit" Model="@_patient" FormName="AddPatientForm">
        <DataAnnotationsValidator />
        <div class="form-group col-auto mt-2">
            <label for="NameInput" class="form-label">Name:</label>
            <InputText id="NameInput" class="form-control" @bind-Value="@_patient.Name" placeholder="Enter patient's name" />
        </div>
    
        <div class="form-group col-auto mt-2">
            <label for="AgeInput" class="form-label">Age:</label>
            <InputNumber id="AgeInput" class="form-control" @bind-Value="@_patient.Age" placeholder="Enter patient's age" />
        </div>
    
        <div class="form-group col-auto mt-2">
            <label for="WeightInput" class="form-label">Weight:</label>
            <InputNumber id="WeightInput" class="form-control" @bind-Value="@_patient.Weight" placeholder="Enter patient's weight" />
        </div>
    
        <div class="form-group mt-3">
            <button type="submit" class="btn btn-primary">Add Patient</button>
        </div>
    </EditForm>
}
else
{
    <div class="alert alert-danger fade-in" role="alert">Login first please.</div>
}

@code {
    private bool _isAuth = false;
    private string? AlertMessage { get; set; }
    private string? AlertClass { get; set; }
    private bool DisplayAlert { get; set; }  
    
    readonly Patient _patient = new Patient();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedSessionStore.GetAsync<string>("password");
            if (result.Success)
            {
                var ans = result.Value!;
                ans = ans.Remove(ans.Length - 1);
                ans = ans.Remove(0, 1);
                _isAuth |= SecretManager.Value.VerifyPassword(ans);
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void HandleSubmit(EditContext editContext)
    {
        DisplayAlert = true;
        try
        {
            var newPatient = (Patient)editContext.Model;
            newPatient.CreatedDate = DateTime.UtcNow;
            PatientService.AddPatient(_patient);
            AlertClass = "alert-success";
            AlertMessage = "Patient record added successfully.";
        }
        catch (Exception e)
        {
            AlertClass = "alert-danger";
            AlertMessage = e.Message;
            throw;
        }
    }
}